import 'package:flutter/material.dart';
import 'package:mindmorph/constants/urls.dart';
import 'package:mindmorph/modules/video_player/data/repositories/course_repository.dart';
import 'package:mindmorph/utils/get_formated_time.dart';
import 'package:mindmorph/widgets/loading_indicator.dart';
import 'package:mindmorph/widgets/video_player.dart';
import '../../../upload_course/data/repositories/course_section.dart';
import '../../../upload_course/models/course_section/section_preview_response.dart';
import '../../../upload_course/presentation/widgets/course_sections/collapsible_view.dart';
import '../../../upload_course/presentation/widgets/course_sections/sections_list.dart';
import '/constants/color.dart';
import 'package:velocity_x/velocity_x.dart';

import 'dashboard/course_details.dart';
import 'dashboard_tab_controller.dart';

class DashboardView extends StatefulWidget {
  const DashboardView({super.key, required this.courseData});
  final CourseResponse courseData;

  @override
  State<DashboardView> createState() => _DashboardViewState();
}

class _DashboardViewState extends State<DashboardView> {
  @override
  Widget build(BuildContext context) {
    final course = widget.courseData.course;
    final courseDetails = widget.courseData.courseDetails;

    String videoUrl = courseDetails.titleVideoUrl;

    return Scaffold(
      backgroundColor: themecolor,
      body: SafeArea(
        child: SingleChildScrollView(
          child: Column(
            // mainAxisSize: MainAxisSize.min,
            children: [
              MindMorphVideoPlayer(
                videoUrl: 'http://$COURSE_SERVER/$videoUrl',
              ),
              5.heightBox,
              CourseDetails(course: course, title: courseDetails.title),
              DashboardTabController(
                  courseDetails: courseDetails,
                  courseSectionView: CourseSectionExpandable(
                    courseId: course.id,
                    onTap: (String lectureUrl) {
                      setState(() {
                        videoUrl = lectureUrl;
                      });
                    },
                  )),
            ],
          ),
        ),
      ),
    );
  }
}

class CourseSectionExpandable extends StatelessWidget {
  const CourseSectionExpandable(
      {super.key, required this.courseId, required this.onTap});
  final int courseId;
  final void Function(String fileUrl) onTap;

  @override
  Widget build(BuildContext context) {
    return FutureBuilder<List<CourseSectionResponseModel>>(
      future: CourseSectionRepository.previewSection(courseId: courseId),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const MindMorphLoadingIndicator();
        } else if (snapshot.hasError) {
          return Center(child: Text('Error: ${snapshot.error}'));
        } else if (!snapshot.hasData || snapshot.data!.isEmpty) {
          return const Center(child: Text('No data available'));
        } else {
          List<CourseSectionResponseModel> sections = snapshot.data!;
          return ListView.builder(
            itemCount: sections.length,
            itemBuilder: (context, index) {
              final section = sections[index];

              return ExpansionTile(
                maintainState: true,
                controller: ExpansionTileController(),
                tilePadding: const EdgeInsets.only(left: 8),
                title: Text(
                  section.title,
                  style: const TextStyle(color: Vx.amber100),
                ),
                children: [
                  ListView.builder(
                    // This allows the ListView to be sized to its content
                    shrinkWrap: true,
                    physics: const NeverScrollableScrollPhysics(),
                    itemCount: section.lectures.length,
                    itemBuilder: ((context, index) {
                      final lecture = section.lectures[index];
                      return MindMorphListTile(
                          lecture: lecture,
                          onTap: () {
                            onTap(lecture.file);
                          });
                    }),
                  )
                ],
              );
            },
          );
        }
      },
    );
  }
}

class MindMorphListTile extends StatefulWidget {
  const MindMorphListTile(
      {super.key, required this.lecture, required this.onTap});
  final Lecture lecture;
  final void Function() onTap;

  @override
  State<MindMorphListTile> createState() => _MindMorphListTileState();
}

class _MindMorphListTileState extends State<MindMorphListTile> {
  @override
  Widget build(BuildContext context) {
    return ListTile(
      title: Text(
        widget.lecture.title,
        style: const TextStyle(color: titlecolor),
      ),
      subtitle: Text(
        getFormatedTime(seconds: widget.lecture.duration),
        style: const TextStyle(color: featureColor),
      ),
      onTap: widget.onTap,
    );
  }
}
